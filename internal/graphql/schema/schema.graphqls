type User {
  id: ID!
  username: String!
  createdAt: String!
  updatedAt: String!
}

type Post {
  id: ID!
  user: User!
  comments(limit: Int, offset: Int): [Comment!]!
  title: String!
  content: String!
  commentsEnabled: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Comment {
  id: ID!
  post: Post!
  user: User!
  parentComment: Comment
  content: String!
  createdAt: String!
  updatedAt: String!
  replies(limit: Int, offset: Int): [Comment!]
}

type Query {
  user(id: ID!): User!
  posts: [Post!]!
  post(id: ID!): Post!
  comments(postId: ID!, limit: Int, offset: Int): [Comment!]!
  replies(commentId: ID!, limit: Int, offset: Int): [Comment!]!
}

input NewUser {
  username: String!
}

input NewPost {
  userId: ID!
  title: String!
  content: String!
  commentsEnabled: Boolean!
}

input NewComment {
  postId: ID!
  parentCommentId: ID
  userId: ID!
  content: String!
}

type Mutation {
  createUser(input: NewUser!): User!
  createPost(input: NewPost!): Post!
  createComment(input: NewComment!): Comment!
}

type Subscription {
  commentAdded(postId: ID!): Comment!
}
